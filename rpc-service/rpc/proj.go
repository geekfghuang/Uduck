// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type UduckSrv interface {
  // Parameters:
  //  - IP
  CitySortAndLoca(ctx context.Context, ip string) (err error)
  // Parameters:
  //  - GoodsId
  PayGoods(ctx context.Context, goodsId string) (err error)
  // Parameters:
  //  - UserId
  UserSex(ctx context.Context, userId string) (err error)
  // Parameters:
  //  - Word
  SearchHot(ctx context.Context, word string) (err error)
}

type UduckSrvClient struct {
  c thrift.TClient
}

// Deprecated: Use NewUduckSrv instead
func NewUduckSrvClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UduckSrvClient {
  return &UduckSrvClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewUduckSrv instead
func NewUduckSrvClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UduckSrvClient {
  return &UduckSrvClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUduckSrvClient(c thrift.TClient) *UduckSrvClient {
  return &UduckSrvClient{
    c: c,
  }
}

// Parameters:
//  - IP
func (p *UduckSrvClient) CitySortAndLoca(ctx context.Context, ip string) (err error) {
  var _args0 UduckSrvCitySortAndLocaArgs
  _args0.IP = ip
  var _result1 UduckSrvCitySortAndLocaResult
  if err = p.c.Call(ctx, "citySortAndLoca", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - GoodsId
func (p *UduckSrvClient) PayGoods(ctx context.Context, goodsId string) (err error) {
  var _args2 UduckSrvPayGoodsArgs
  _args2.GoodsId = goodsId
  var _result3 UduckSrvPayGoodsResult
  if err = p.c.Call(ctx, "payGoods", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserId
func (p *UduckSrvClient) UserSex(ctx context.Context, userId string) (err error) {
  var _args4 UduckSrvUserSexArgs
  _args4.UserId = userId
  var _result5 UduckSrvUserSexResult
  if err = p.c.Call(ctx, "userSex", &_args4, &_result5); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Word
func (p *UduckSrvClient) SearchHot(ctx context.Context, word string) (err error) {
  var _args6 UduckSrvSearchHotArgs
  _args6.Word = word
  var _result7 UduckSrvSearchHotResult
  if err = p.c.Call(ctx, "searchHot", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

type UduckSrvProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UduckSrv
}

func (p *UduckSrvProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UduckSrvProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UduckSrvProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUduckSrvProcessor(handler UduckSrv) *UduckSrvProcessor {

  self8 := &UduckSrvProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["citySortAndLoca"] = &uduckSrvProcessorCitySortAndLoca{handler:handler}
  self8.processorMap["payGoods"] = &uduckSrvProcessorPayGoods{handler:handler}
  self8.processorMap["userSex"] = &uduckSrvProcessorUserSex{handler:handler}
  self8.processorMap["searchHot"] = &uduckSrvProcessorSearchHot{handler:handler}
return self8
}

func (p *UduckSrvProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type uduckSrvProcessorCitySortAndLoca struct {
  handler UduckSrv
}

func (p *uduckSrvProcessorCitySortAndLoca) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UduckSrvCitySortAndLocaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("citySortAndLoca", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UduckSrvCitySortAndLocaResult{}
  var err2 error
  if err2 = p.handler.CitySortAndLoca(ctx, args.IP); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing citySortAndLoca: " + err2.Error())
    oprot.WriteMessageBegin("citySortAndLoca", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("citySortAndLoca", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type uduckSrvProcessorPayGoods struct {
  handler UduckSrv
}

func (p *uduckSrvProcessorPayGoods) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UduckSrvPayGoodsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("payGoods", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UduckSrvPayGoodsResult{}
  var err2 error
  if err2 = p.handler.PayGoods(ctx, args.GoodsId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing payGoods: " + err2.Error())
    oprot.WriteMessageBegin("payGoods", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("payGoods", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type uduckSrvProcessorUserSex struct {
  handler UduckSrv
}

func (p *uduckSrvProcessorUserSex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UduckSrvUserSexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("userSex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UduckSrvUserSexResult{}
  var err2 error
  if err2 = p.handler.UserSex(ctx, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing userSex: " + err2.Error())
    oprot.WriteMessageBegin("userSex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("userSex", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type uduckSrvProcessorSearchHot struct {
  handler UduckSrv
}

func (p *uduckSrvProcessorSearchHot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UduckSrvSearchHotArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchHot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UduckSrvSearchHotResult{}
  var err2 error
  if err2 = p.handler.SearchHot(ctx, args.Word); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchHot: " + err2.Error())
    oprot.WriteMessageBegin("searchHot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("searchHot", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - IP
type UduckSrvCitySortAndLocaArgs struct {
  IP string `thrift:"ip,1" db:"ip" json:"ip"`
}

func NewUduckSrvCitySortAndLocaArgs() *UduckSrvCitySortAndLocaArgs {
  return &UduckSrvCitySortAndLocaArgs{}
}


func (p *UduckSrvCitySortAndLocaArgs) GetIP() string {
  return p.IP
}
func (p *UduckSrvCitySortAndLocaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvCitySortAndLocaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *UduckSrvCitySortAndLocaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("citySortAndLoca_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvCitySortAndLocaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *UduckSrvCitySortAndLocaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvCitySortAndLocaArgs(%+v)", *p)
}

type UduckSrvCitySortAndLocaResult struct {
}

func NewUduckSrvCitySortAndLocaResult() *UduckSrvCitySortAndLocaResult {
  return &UduckSrvCitySortAndLocaResult{}
}

func (p *UduckSrvCitySortAndLocaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvCitySortAndLocaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("citySortAndLoca_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvCitySortAndLocaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvCitySortAndLocaResult(%+v)", *p)
}

// Attributes:
//  - GoodsId
type UduckSrvPayGoodsArgs struct {
  GoodsId string `thrift:"goodsId,1" db:"goodsId" json:"goodsId"`
}

func NewUduckSrvPayGoodsArgs() *UduckSrvPayGoodsArgs {
  return &UduckSrvPayGoodsArgs{}
}


func (p *UduckSrvPayGoodsArgs) GetGoodsId() string {
  return p.GoodsId
}
func (p *UduckSrvPayGoodsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvPayGoodsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GoodsId = v
}
  return nil
}

func (p *UduckSrvPayGoodsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("payGoods_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvPayGoodsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("goodsId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:goodsId: ", p), err) }
  if err := oprot.WriteString(string(p.GoodsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.goodsId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:goodsId: ", p), err) }
  return err
}

func (p *UduckSrvPayGoodsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvPayGoodsArgs(%+v)", *p)
}

type UduckSrvPayGoodsResult struct {
}

func NewUduckSrvPayGoodsResult() *UduckSrvPayGoodsResult {
  return &UduckSrvPayGoodsResult{}
}

func (p *UduckSrvPayGoodsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvPayGoodsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("payGoods_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvPayGoodsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvPayGoodsResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UduckSrvUserSexArgs struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUduckSrvUserSexArgs() *UduckSrvUserSexArgs {
  return &UduckSrvUserSexArgs{}
}


func (p *UduckSrvUserSexArgs) GetUserId() string {
  return p.UserId
}
func (p *UduckSrvUserSexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvUserSexArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UduckSrvUserSexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("userSex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvUserSexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UduckSrvUserSexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvUserSexArgs(%+v)", *p)
}

type UduckSrvUserSexResult struct {
}

func NewUduckSrvUserSexResult() *UduckSrvUserSexResult {
  return &UduckSrvUserSexResult{}
}

func (p *UduckSrvUserSexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvUserSexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("userSex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvUserSexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvUserSexResult(%+v)", *p)
}

// Attributes:
//  - Word
type UduckSrvSearchHotArgs struct {
  Word string `thrift:"word,1" db:"word" json:"word"`
}

func NewUduckSrvSearchHotArgs() *UduckSrvSearchHotArgs {
  return &UduckSrvSearchHotArgs{}
}


func (p *UduckSrvSearchHotArgs) GetWord() string {
  return p.Word
}
func (p *UduckSrvSearchHotArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvSearchHotArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Word = v
}
  return nil
}

func (p *UduckSrvSearchHotArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchHot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvSearchHotArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("word", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:word: ", p), err) }
  if err := oprot.WriteString(string(p.Word)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.word (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:word: ", p), err) }
  return err
}

func (p *UduckSrvSearchHotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvSearchHotArgs(%+v)", *p)
}

type UduckSrvSearchHotResult struct {
}

func NewUduckSrvSearchHotResult() *UduckSrvSearchHotResult {
  return &UduckSrvSearchHotResult{}
}

func (p *UduckSrvSearchHotResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UduckSrvSearchHotResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchHot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UduckSrvSearchHotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UduckSrvSearchHotResult(%+v)", *p)
}


